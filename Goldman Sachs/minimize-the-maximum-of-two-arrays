/*We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:

arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.
arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.
No integer is present in both arr1 and arr2.
Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.*/

class Solution {
public:
    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        long long l=1,r=1e15,res=r,d1=divisor1,d2=divisor2,cnt1=uniqueCnt1,cnt2=uniqueCnt2;
        long long g=gcd(d1,d2),lcm=(d1*d2)/g;
        while(l<=r){
            long long mid=(l+r)/2;
            if(d1==d2){
                long long cnt=mid-(mid/d1);//remaining integers that can be taken and can be filed in both the arrays
                if(cnt>=cnt1+cnt2){
                    res =mid;
                    r=mid-1;//we can find smaller value for mid
                }
                else{
                    l=mid+1;
                }
            }
            else{
                // take c1 and c2 such that c1 contains all the elements which are divisible my d1 but not d2 and c2 contains elements which are divisible by d2 and not d1

            long long common=mid/lcm; //common has elemnts which are divisible by both d1 and d2

            long long c1=(mid/d1)-common;
            long long c2=(mid/d2)-common;

            long long z1=cnt1 , z2=cnt2;
            long long rem = mid -(c1+c2+common);//rem represents the remaining number of elements to be filled in the array therefore we subtract all elements present in c1, c2 and common from mid

            z1 -= min(z1,c2); //we assign elements in c2 to arr1
            z2 -= min(z2,c1); //we assign elements in c1 to arr2

            if(z1+z2<=rem){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
            }
        }
        return res;
    }
};
